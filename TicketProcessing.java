package lesson;

import java.io.FileNotFoundException;
import java.text.DecimalFormat;
import java.io.File;
import java.util.Scanner;

import lesson.TicketInterface.Event;

import java.util.ArrayList;

/**
* Reads in ticket sales data and provides a summary of the sales data
*
* @author Justin Mello
*/

public class TicketProcessing {

    
    private ArrayList<TicketInterface> tickets; // Holds the tickets read from file
    private double totalRevenue; // Total money earned from tickets sold
    // add other fields as necessary
    private String eventName, eventDate, ticketHolder, seatType;
    private int seatNumber;
    private TicketInterface.Event eventType;
    private double BASE_COST = 16;
    // constants for minimum and maximum values for
    // zones and boxes.
    // Just in case we build a bigger theater later
    private final int MIN_ZONE = 10;
    private final int MAX_ZONE = 20;
    private final int MIN_BOX = 1;
    private final int MAX_BOX = 8;

    /**
     * Constructor - reads data from filename
     * Stores ticket data 
     * @param filename - file of ticket sale data to process
     */     
    public TicketProcessing(String filename) throws FileNotFoundException
    {
	// Initialize all attributes
        tickets = new ArrayList<TicketInterface>();
        totalRevenue = 0;
	// call readTicketData to populate tickets
        readTicketData(filename);
	// Do not catch any exceptions here
    }


    
    /**
     * Reads a new ticket sales file. If data has already been read
     * in, calling this method will clear all previous ticket and
     * revenue data
     * 
     * @param filename - file of ticket sale data to process
     * @throws InvalidDateException, NoSuchLocationException, FileNotFoundException, IllegalArgumentException
     */
    public void readTicketData(String filename) throws FileNotFoundException{
        // use a Scanner to read the ticket data
        Scanner fileScan = new Scanner(new File(filename));

	    // Clear tickets and reset revenue values
        tickets.clear();
        totalRevenue = 0;

	    // Process file 
	    while(fileScan.hasNext())
        {
            eventName = fileScan.nextLine();
            if (eventName == "CONCERT")
            {
                eventType = Event.CONCERT;
            }
            else if (eventName == "PERFORMANCE")
            {
                eventType = Event.PERFORMANCE;
            }
            else if (eventName == "SPORT")
            {
                eventType = Event.SPORT;
            }

            // parse event date
            eventDate = fileScan.nextLine();
            String [] parseDate = eventDate.split("/",3);
            int day = Integer.parseInt(parseDate[0]);
            int month = Integer.parseInt(parseDate[1]);
            int year = Integer.parseInt(parseDate[2]);
            
                    

            // read name
            ticketHolder = fileScan.nextLine();
            
            // parse zone/box number
            seatType = fileScan.nextLine();
            seatNumber = Integer.parseInt(seatType);



            // Create a ticket object and add it to tickets How do you
	        // know whether to create a VIPTicket or a FloorTicket?
	        // Check the zone/box number
            if(seatNumber >= MIN_ZONE && seatNumber <= MAX_ZONE)
            {
                tickets.add(new FloorTicket(ticketHolder, eventType, eventDate, seatNumber));
            }
            else if(seatNumber >= MIN_BOX && seatNumber <= MAX_BOX)
            {
                tickets.add(new VIPTicket(ticketHolder, eventType, eventDate, seatNumber));
            }


        }
	    //  Update revenue
       totalRevenue = getRevenue(Event.CONCERT) + getRevenue(Event.PERFORMANCE) + getRevenue(Event.SPORT);
        
	    // Close the file
	    fileScan.close();

	    // If file was empty, throw IllegalArgumentException
        if(tickets.size() == 0)
        {
            throw new IllegalArgumentException("Datafile is missing information");                            
        }
    }

    /**
     * Return number tickets sold
     */ 
    public int totalTicketsSold(){
        return tickets.size();
    }
    
    /**
     * Return total revenue
     */
    public double getTotalRevenue(){
        return totalRevenue;
    }
    
    /**
     * Return total revenue for specific type of event 
     *
     * Example: if whichEventType is TicketInterface.Event.SPORT,
     * return the revenue generated by only the SPORT tickets
     *
     * @param whichEventType - the type of event for which to calculate the revenue
     */
    public double getRevenue(TicketInterface.Event whichEventType){
        // note using the enum cuts down on errors - parameter has to
        // be one of the correct Event types because the compiler
        // enforces that you use a correct Event type
        double revenueSum = 0;
        for(TicketInterface ticket : tickets)
        {
            switch(whichEventType)
            {
                case CONCERT:
                    revenueSum += ticket.getCost();
                    break;
                case SPORT:
                    revenueSum += ticket.getCost();
                    break;
                case PERFORMANCE:
                    revenueSum += ticket.getCost();
                    break;
                default:
                System.out.println("Event type unknown");
            }  
         }
        
	return revenueSum;
    }
    
    /**
     * Return a string with sales data in the following format 
     * (zeroes to be replaced with actual values)
     * 
     * Total number of tickets sold: $0.00
     * Total Revenue: $0.00
     * Total Sports Revenue: $0.00
     * Total Performance Revenue: $0.00
     * Total Concert Revenue: $0.00
     */ 
      public String toString(){
        DecimalFormat fmt = new DecimalFormat("0.00");
        String res = "Total number of tickets sold: " + tickets.size();
        res += "\nTotal Revenue: $" + fmt.format(totalRevenue);
        res += "\nTotal Sports Revenue: $" + fmt.format(getRevenue(TicketInterface.Event.SPORT));
        res += "\nTotal Performance Revenue: $" +  fmt.format(getRevenue(TicketInterface.Event.PERFORMANCE));
        res += "\nTotal Concert Revenue: $" + fmt.format(getRevenue(TicketInterface.Event.CONCERT));
        
        return res;

      }


}
